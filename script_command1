#!/usr/bin/env bash
#Example

name="John"
echo "Hello $name!"
#Variables
name="John"
echo $name  # see below
echo "$name"
echo "${name}!"
#Generally quote your variables unless they contain wildcards to expand or command fragments.

wildcard="*.txt"
option="iv"
cp -$options $wildcard /tmp
#String quotes
name="John"
echo "Hi $name"  #=> Hi John
echo 'Hi $name'  #=> Hi $name
#Shell execution
echo "I'm in $(pwd)"
echo "I'm in `pwd`"  # obsolescent
# Same
#See Command substitution

#Conditional execution
git commit && git push
git commit || echo "Commit failed"
#Functions
{: id='functions-example'}

get_name() {
  echo "John"
}

echo "You are $(get_name)"
#See: Functions

#Conditionals
{: id='conditionals-example'}

if [[ -z "$string" ]]; then
  echo "String is empty"
elif [[ -n "$string" ]]; then
  echo "String is not empty"
fi
#See: Conditionals

#Strict mode
set -euo pipefail
IFS=$'\n\t'
#See: Unofficial bash strict mode
#Brace expansion
echo {A,B}.js
#Expression	Description
{A,B}	Same as A B
{A,B}.js	Same as A.js B.js
{1..5}	Same as 1 2 3 4 5
#See: Brace expansion

#Parameter expansions
{: .-three-column}

#Basics
name="John"
echo "${name}"
echo "${name/J/j}"    #=> "john" (substitution)
echo "${name:0:2}"    #=> "Jo" (slicing)
echo "${name::2}"     #=> "Jo" (slicing)
echo "${name::-1}"    #=> "Joh" (slicing)
echo "${name:(-1)}"   #=> "n" (slicing from right)
echo "${name:(-2):1}" #=> "h" (slicing from right)
echo "${food:-Cake}"  #=> $food or "Cake"
length=2
echo "${name:0:length}"  #=> "Jo"
#See: Parameter expansion

str="/path/to/foo.cpp"
echo "${str%.cpp}"    # /path/to/foo
echo "${str%.cpp}.o"  # /path/to/foo.o
echo "${str%/*}"      # /path/to

echo "${str##*.}"     # cpp (extension)
echo "${str##*/}"     # foo.cpp (basepath)

echo "${str#*/}"      # path/to/foo.cpp
echo "${str##*/}"     # foo.cpp

echo "${str/foo/bar}" # /path/to/bar.cpp
str="Hello world"
echo "${str:6:5}"   # "world"
echo "${str: -5:5}"  # "world"
src="/path/to/foo.cpp"
base=${src##*/}   #=> "foo.cpp" (basepath)
dir=${src%$base}  #=> "/path/to/" (dirpath)
Substitution
#Code	        #Description
${foo%suffix}	Remove suffix
${foo#prefix}	Remove prefix
---	---
${foo%%suffix}	Remove long suffix
${foo/%suffix}	Remove long suffix
${foo##prefix}	Remove long prefix
${foo/#prefix}	Remove long prefix
---	---
${foo/from/to}	Replace first match
${foo//from/to}	Replace all
---	---
${foo/%from/to}	Replace suffix
${foo/#from/to}	Replace prefix
#Comments
# Single line comment
